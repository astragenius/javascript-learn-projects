/*
  1. Use a more-intuitive box-sizing model.
*/
*, *::before, *::after {
    box-sizing: border-box;
}
  /*
    2. Remove default margin
  */
* {
    margin: 0;
}
  /*
    3. Allow percentage-based heights in the application
  */
html, body {
    height: 100%;
}
  /*
    Typographic tweaks!
    4. Add accessible line-height
    5. Improve text rendering
  */
body {
    line-height: 1.5;
    -webkit-font-smoothing: antialiased;
}
  /*
    6. Improve media defaults
  */
img, picture, video, canvas, svg {
    display: block;
    max-width: 100%;
}
  /*
    7. Remove built-in form typography styles
  */
input, button, textarea, select {
    font: inherit;
}
  /*
    8. Avoid text overflows
  */
p, h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
}
  /*
    9. Create a root stacking context
  */
#root, #__next {
    isolation: isolate;
}


:root {
    --hue: 140;
    --size: 1.5rem;
    --radius: .2em;
    --tspeed-fast: 150ms;
    --tspeed-slow: 400ms;
    --ttype_spuish: cubic-bezier(0.86, -0.1, 0.27, 1.15);


    /* Light mode */

    --bg-light: var(--hue) 30% 94%;
    --txt-light: var(--hue) 40% 5%;
    --accent-light: var(--hue) 55% 50%;
    --muted-light: var(--hue) 30% 99%;


    /* Dark mode */

    --bg-dark: var(--hue) 15% 10%;
    --txt-dark: var(--hue) 30% 88%;
    --accent-dark: var(--hue) 50% 50%;
    --muted-dark: var(--hue) 20% 4%;


    --bg: var(--bg-light);
    --txt: var(--txt-light);
    --accent: var(--accent-light);
    --muded: var(--muted-light);
}


.material-symbols-outlined {
    font-family: 'Material Symbols Outlined';
    font-weight: normal;
    font-style: normal;
    font-size: 24px;  /* Preferred icon size */
    display: inline-block;
    line-height: 1;
    text-transform: none;
    letter-spacing: normal;
    word-wrap: normal;
    white-space: nowrap;
    direction: ltr;
}
  


body {
    min-height: 100vh;
    display: grid;
    place-items: center;
    font-family: 'Noto-Sans', sans-serif;
    background-color: hsl(var(--bg));
    color: hsl(var(--txt));
}

h1 {
  font-size: calc(var(--size) * 2);
}

.container {
  display: grid;
  gap: 1.5vmax;
  /* max-width: 1200px; */
  max-width: calc(var(--size) * 30);
  
}

.url-input-container {
  display: flex;
  font-size: var(--size);
  position: relative;
  gap: .2em;
  align-items: center;
  -webkit-margin-before: .6em;
            margin-block-start: .6em;
}


.input-label {
  position: absolute;
  text-transform: uppercase;
  font-size: 1em;
  letter-spacing: .05em;
  margin-inline: 0.45em;
  top: 50%;
  transform: translateY(-50%);
  padding: .1em .35em;
  background-color: hsl(var(--muted));
  transition: 
        transform var(--tspeed-fast) var(--ttype_spuish),
        background-color var(--tspeed-fast) var(--ttype_spuish);
}


.input {
  flex: 90%;
  border: none;
  border-radius: var(--radius);
  padding: .35em .55em;
  background-color: hsl(var(--muted));
  caret-color: hsl(var(--accent));

  box-shadow: 
        0 0 0 -.1em hsl(var(--bg)),
        0 0 0 -.2em hsl(var(--accent) / .8);
  
  transition: 
    box-shadow var(--tspeed-slow) var(--ttype_spuish);

}

.input:focus {
  outline: none;
  box-shadow: 
  0 0 0 .2em hsl(var(--bg)),
  0 0 0 .4em hsl(var(--accent) / .8);
}

.input:focus ~ .input-label,
.input:not(:placeholder-shown) ~ .input-label {
    transform: translate3d(0, -2.75em, 0);
    background-color: hsl(var(--bg));
    color: hsl(var(--accent) / .8);
}

.img {
  -o-object-fit: contain;
     object-fit: contain;
  
  border-radius: .5em;
  box-shadow: 
        .05em .1em .9em hsl(var(--txt) / .3),
        0 0 0 -.1em hsl(var(--bg)),
        0 0 0 -.2em hsl(var(--txt));
  
  

}

.control-btn-container {
  display: flex;
  gap: .5em;
}

.btn {
    display: flex;
    align-items: center;
    border: none;
    cursor: pointer;

    background-color: hsl(var(--accent));
    color: hsl(var(--bg));
    border-radius: .2em;
    font-size: var(--size);
    box-shadow: 
        .05em .1em .9em hsl(var(--accent) / .3),
        0 0 0 -.1em hsl(var(--bg)),
        0 0 0 -.2em hsl(var(--accent));
    transition: 
        box-shadow var(--tspeed-slow) var(--ttype_spuish),
        background-color var(--tspeed-slow) var(--ttype_spuish);
}

.btn:where(:active, :hover) {
  background-color: hsl(var(--accent) / .8);
  box-shadow: 
      0 0 0 hsl(var(--accent) / .3),
      0 0 0 -.1em hsl(var(--bg)),
      0 0 0 -.2em hsl(var(--accent));
}

.btn:focus {
  outline: none;

}
.btn:focus-visible {
  box-shadow: 
  0 0 0 hsl(var(--accent) / .3),
  0 0 0 .2em hsl(var(--bg)),
  0 0 0 .4em hsl(var(--accent) / .5);
}

.btn-display {
  flex: 10%;
  padding: .4em 1.4em;
  font-size: var(--size);
}

.btn-control {
  flex: 1;
  padding: .4em 1.4em;
  
}


/* Animation */
@-webkit-keyframes flip-left {
  0% {
      transform: perspective(400px) scaleX(1);
  }

  100% {
      transform: perspective(400px) scaleX(-1);
  }
}
@-webkit-keyframes flip-with-scale {
  0% {
      transform: perspective(400px) scaleX(1);
  }

  100% {
      transform: perspective(400px) scaleX(-1);
  }
}
@keyframes flip-with-scale {
  0% {
      transform: perspective(400px) scaleX(1);
  }

  100% {
      transform: perspective(400px) scaleX(-1);
  }
}


@-webkit-keyframes flip-right {

  0% {
    transform: perspective(400px) scaleX(-1);
  }

  100% {
    transform: perspective(400px) scaleX(1);
  }
}


@keyframes flip-right {

  0% {
    transform: perspective(400px) scaleX(-1);
  }

  100% {
    transform: perspective(400px) scaleX(1);
  }
}


@-webkit-keyframes flip-up {

  0% {
    transform: perspective(400px) scaleY(1);
  }

  100% {
    transform: perspective(400px) scaleY(-1);
  }
}


@keyframes flip-up {

  0% {
    transform: perspective(400px) scaleY(1);
  }

  100% {
    transform: perspective(400px) scaleY(-1);
  }
}

@-webkit-keyframes flip-down {

  0% {
    transform: perspective(400px) scaleY(-1);
  }

  100% {
    transform: perspective(400px) scaleY(1);
  }
}

@keyframes flip-down {

  0% {
    transform: perspective(400px) scaleY(-1);
  }

  100% {
    transform: perspective(400px) scaleY(1);
  }
}